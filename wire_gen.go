// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/sixwaaaay/shauser/internal/config"
	"github.com/sixwaaaay/shauser/internal/data"
	"github.com/sixwaaaay/shauser/internal/logic"
	"github.com/sixwaaaay/shauser/internal/server"
	"gorm.io/gorm"
)

// Injectors from wire.go:

func NewServer(config2 *config.Config, db *gorm.DB) *server.UserServiceServer {
	userQuery := data.NewUserQuery(db)
	followQuery := data.NewFollowQuery(db)
	getUserLogicOption := logic.GetUserLogicOption{
		Config:  config2,
		UserQ:   userQuery,
		FollowQ: followQuery,
	}
	getUserLogic := logic.NewGetUserLogic(getUserLogicOption)
	getUsersLogicOption := logic.GetUsersLogicOption{
		Config:  config2,
		UserQ:   userQuery,
		FollowQ: followQuery,
	}
	getUsersLogic := logic.NewGetUsersLogic(getUsersLogicOption)
	userCommand := data.NewUserCommand(db)
	loginLogicOption := logic.LoginLogicOption{
		Config:      config2,
		UserCommand: userCommand,
	}
	loginLogic := logic.NewLoginLogic(loginLogicOption)
	registerLogicOption := logic.RegisterLogicOption{
		Config:      config2,
		UserCommand: userCommand,
	}
	registerLogic := logic.NewRegisterLogic(registerLogicOption)
	followCommand := data.NewFollowCommand(db)
	followActionLogicOption := logic.FollowActionLogicOption{
		Config: config2,
		Follow: followCommand,
	}
	followActionLogic := logic.NewFollowActionLogic(followActionLogicOption)
	getFollowersLogicOption := logic.GetFollowersLogicOption{
		Config:   config2,
		FollowQ:  followQuery,
		GetUsers: getUsersLogic,
	}
	getFollowersLogic := logic.NewGetFollowersLogic(getFollowersLogicOption)
	getFollowingsLogicOption := logic.GetFollowingsLogicOption{
		Config:   config2,
		FollowQ:  followQuery,
		GetUsers: getUsersLogic,
	}
	getFollowingsLogic := logic.NewGetFollowingsLogic(getFollowingsLogicOption)
	getFriendsLogicOption := logic.GetFriendsLogicOption{
		Config:  config2,
		UserQ:   userQuery,
		FollowQ: followQuery,
	}
	getFriendsLogic := logic.NewGetFriendsLogic(getFriendsLogicOption)
	serverOption := server.ServerOption{
		GetUserLogic:       getUserLogic,
		GetUsersLogic:      getUsersLogic,
		LoginLogic:         loginLogic,
		RegisterLogic:      registerLogic,
		FollowActionLogic:  followActionLogic,
		GetFollowersLogic:  getFollowersLogic,
		GetFollowingsLogic: getFollowingsLogic,
		GetFriendsLogic:    getFriendsLogic,
	}
	userServiceServer := server.NewUserServiceServer(serverOption)
	return userServiceServer
}
