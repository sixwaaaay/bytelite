import{_ as e,c as t,o as a,a2 as o}from"./chunks/framework.84TDCN6B.js";const u=JSON.parse('{"title":"Comments","description":"","frontmatter":{},"headers":[],"relativePath":"comments/index.md","filePath":"comments/index.md"}'),r={name:"comments/index.md"},i=o('<h1 id="comments" tabindex="-1">Comments <a class="header-anchor" href="#comments" aria-label="Permalink to &quot;Comments&quot;">​</a></h1><p><a href="https://github.com/sixwaaaay/sharing/actions/workflows/comment.yaml" target="_blank" rel="noreferrer"><img src="https://github.com/sixwaaaay/sharing/actions/workflows/comment.yaml/badge.svg" alt="CI"></a></p><p><a href="https://hub.docker.com/r/sixwaaaay/sharing-comment" target="_blank" rel="noreferrer"><img src="https://img.shields.io/docker/image-size/sixwaaaay/sharing-comment/latest" alt="Container Image Size"></a></p><p><a href="https://hub.docker.com/r/sixwaaaay/sharing-comment" target="_blank" rel="noreferrer"><img src="https://img.shields.io/docker/pulls/sixwaaaay/sharing-comment" alt="Docker Pulls"></a></p><p><a href="https://hub.docker.com/r/sixwaaaay/sharing-comment" target="_blank" rel="noreferrer"><img src="https://img.shields.io/docker/v/sixwaaaay/sharing-comment?sort=semver" alt="Docker Image Version (latest semver)"></a></p><p><a href="https://codecov.io/gh/sixwaaaay/sharing" target="_blank" rel="noreferrer"><img src="https://codecov.io/gh/sixwaaaay/sharing/branch/main/graph/badge.svg" alt="Codcov"></a></p><p>the comments module backend.</p><h2 id="technologies" tabindex="-1">Technologies <a class="header-anchor" href="#technologies" aria-label="Permalink to &quot;Technologies&quot;">​</a></h2><table><thead><tr><th>Name</th><th>Usage</th></tr></thead><tbody><tr><td>Spring Boot</td><td>Application Backbone Framework</td></tr><tr><td>Spring Cache &amp; Redis</td><td>Caching</td></tr><tr><td>Spring Data JDBC &amp; MySQL</td><td>Database</td></tr><tr><td>Resilience4j</td><td>Circuit Breaker &amp; Retry</td></tr><tr><td>Micrometer</td><td>Observability</td></tr><tr><td>Prometheus</td><td>Metrics</td></tr><tr><td>OpenTelemetry</td><td>Tracing</td></tr><tr><td>Bearer Token</td><td>Security</td></tr><tr><td>GraalVM JDK 21</td><td>AOT Compilation</td></tr><tr><td>Docker</td><td>Containerization</td></tr><tr><td>Compose</td><td>Automation</td></tr><tr><td>GitHub Actions</td><td>CI/CD</td></tr><tr><td>JUnit 5</td><td>Testing</td></tr><tr><td>Jacoco</td><td>Coverage</td></tr></tbody></table><h2 id="details" tabindex="-1">Details <a class="header-anchor" href="#details" aria-label="Permalink to &quot;Details&quot;">​</a></h2><p>The comments module backend is a Spring Boot application that provides HTTP APIs for comments.</p><p>Thanks to the Spring Boot framework, the application is easy to develop. <strong>The minimal JDK version is 21</strong>, so that <strong>virtual threads</strong> can be used to improve the performance.</p><p><strong>Spring Data JDBC</strong> and <strong>Spring Data Relational</strong> are used to access the MySQL database and generate the SQL queries automatically.</p><p><strong>Spring Cache</strong> is used to cache the comments data, and <strong>Redis</strong> is used as the cache store. The cache serialization is done by <strong>Jackson</strong>.</p><p><strong>Resilience4j</strong> is used to provide the circuit breaker and retry features, so that the application can be more resilient and degrade when necessary.</p><p><strong>Micrometer</strong> is used to collect the metrics, and <strong>Prometheus</strong> is used to store the metrics. <strong>OpenTelemetry</strong> is used to collect the traces.</p><p><strong>GraalVM JDK 21</strong> is used to compile the application to a native image, so that the application can start faster, consume less memory and have a smaller disk footprint.</p><p><strong>Docker</strong> is used to containerize the application, and <strong>Compose</strong> is used to automate the development environment.</p><p><strong>GitHub Actions</strong> is used to automate the CI/CD process, and <strong>JUnit 5</strong> is used to test the application with <strong>Jacoco</strong> for coverage.</p><h2 id="user-features" tabindex="-1">User Features <a class="header-anchor" href="#user-features" aria-label="Permalink to &quot;User Features&quot;">​</a></h2><ul><li>Submit a comment</li><li>Read comments by page</li><li>Read sub-comments by page</li><li>Reply to a comment or sub-comment</li><li>Like a comment or sub-comment</li><li>Dislike a comment or sub-comment</li></ul><h2 id="service-features" tabindex="-1">Service Features <a class="header-anchor" href="#service-features" aria-label="Permalink to &quot;Service Features&quot;">​</a></h2><ul><li>Dynamic DataSource Routing for Read/Write Separation</li><li>MySQL Database Index for Comment Query</li><li>Redis Cache for Comment Data</li><li>keyset Pagination for Comment Query</li><li>AOT Compilation for GraalVM Native Image</li><li>Docker Containerization for packaging</li><li>Compose Automation for development environment</li><li>GitHub Actions for CI/CD</li><li>JUnit 5 &amp; Jacoco for testing and coverage</li></ul><h2 id="service-dependencies" tabindex="-1">Service Dependencies <a class="header-anchor" href="#service-dependencies" aria-label="Permalink to &quot;Service Dependencies&quot;">​</a></h2><p>The comments module backend depends on the following services:</p><ul><li>MySQL Database for storing the comments data</li><li>Redis for caching, this is optional,which can be disabled by configuration</li><li>OpenTelemetry Collector for collecting the traces, this is optional, which can be disabled by configuration</li><li>Users Service with http API for user information, this is optional, which can be disabled by configuration</li><li>Vote Service with http API for voting, this is optional, which can be disabled by configuration</li></ul>',26),s=[i];function n(c,d,l,m,h,p){return a(),t("div",null,s)}const b=e(r,[["render",n]]);export{u as __pageData,b as default};
