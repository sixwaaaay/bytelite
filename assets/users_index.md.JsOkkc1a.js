import{_ as t,c as e,o as a,a2 as r}from"./chunks/framework.84TDCN6B.js";const m=JSON.parse('{"title":"Users","description":"","frontmatter":{},"headers":[],"relativePath":"users/index.md","filePath":"users/index.md"}'),s={name:"users/index.md"},o=r('<h1 id="users" tabindex="-1">Users <a class="header-anchor" href="#users" aria-label="Permalink to &quot;Users&quot;">​</a></h1><p><a href="https://github.com/sixwaaaay/sharing/actions/workflows/users.yaml" target="_blank" rel="noreferrer"><img src="https://github.com/sixwaaaay/sharing/actions/workflows/users.yaml/badge.svg" alt="CI"></a></p><p><a href="https://hub.docker.com/r/sixwaaaay/shauser" target="_blank" rel="noreferrer"><img src="https://img.shields.io/docker/image-size/sixwaaaay/shauser/latest" alt="Container Image Size"></a></p><p><a href="https://hub.docker.com/r/sixwaaaay/shauser" target="_blank" rel="noreferrer"><img src="https://img.shields.io/docker/pulls/sixwaaaay/shauser" alt="Docker Pulls"></a></p><p><a href="https://hub.docker.com/r/sixwaaaay/shauser" target="_blank" rel="noreferrer"><img src="https://img.shields.io/docker/v/sixwaaaay/shauser?sort=semver" alt="Docker Image Version (latest semver)"></a></p><p><a href="https://codecov.io/gh/sixwaaaay/sharing" target="_blank" rel="noreferrer"><img src="https://codecov.io/gh/sixwaaaay/sharing/branch/main/graph/badge.svg" alt="Codcov"></a></p><p>the users module backend.</p><h2 id="technologies" tabindex="-1">Technologies <a class="header-anchor" href="#technologies" aria-label="Permalink to &quot;Technologies&quot;">​</a></h2><table><thead><tr><th>Name</th><th>Usage</th></tr></thead><tbody><tr><td>gRPC</td><td>gRPC endpoints</td></tr><tr><td>echo</td><td>http endpoints</td></tr><tr><td>GORM &amp; MySQL</td><td>Database</td></tr><tr><td>GitHub OAuth2</td><td>OAuth2 login</td></tr><tr><td>testify &amp; go cover</td><td>Testing &amp; Coverage</td></tr><tr><td>Docker</td><td>Containerization</td></tr><tr><td>Compose</td><td>Automation</td></tr><tr><td>GitHub Actions</td><td>CI/CD</td></tr><tr><td>OpenTelemetry-Go</td><td>Tracing &amp; Metrics</td></tr></tbody></table><h2 id="details" tabindex="-1">Details <a class="header-anchor" href="#details" aria-label="Permalink to &quot;Details&quot;">​</a></h2><p>The users module backend provides <strong>both gRPC and http APIs</strong> for users. gRPC serializes the data with protobuf, and http serializes the data with json.</p><p><strong>GORM</strong> is used to access the MySQL database and change the data source.</p><p><strong>GitHub OAuth</strong> is used to provide the OAuth login feature, which is a third-party login feature so that users can log in with their GitHub accounts without registering.</p><p><strong>Testify</strong> is used to simplify the testing, and the built-in <strong>go cover</strong> is used to collect the coverage.</p><p><strong>Docker</strong> is used to containerize the application, and <strong>Compose</strong> is used to automate the development environment.</p><p><strong>GitHub Actions</strong> is used to automate the CI/CD process.</p><p><strong>OpenTelemetry-Go</strong> is used to collect and export the tracing and metrics data.</p><h2 id="user-features" tabindex="-1">User Features <a class="header-anchor" href="#user-features" aria-label="Permalink to &quot;User Features&quot;">​</a></h2><ul><li>Sign Up and Sign In</li><li>OAuth Login with GitHub</li><li>Get User Info</li><li>Update User Info</li><li>Follow and Unfollow Users</li><li>Get Followers and Followings List by Page</li></ul><h2 id="service-features" tabindex="-1">Service Features <a class="header-anchor" href="#service-features" aria-label="Permalink to &quot;Service Features&quot;">​</a></h2><ul><li>gRPC and http APIs</li><li>Read and write separation</li><li>Database connection pool</li><li>Cached Precompiled Statements</li><li>OAuth login</li><li>Tracing and metrics by OpenTelemetry protocol</li></ul>',21),i=[o];function n(d,l,h,c,u,g){return a(),e("div",null,i)}const b=t(s,[["render",n]]);export{m as __pageData,b as default};
