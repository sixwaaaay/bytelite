import{_ as t,c as e,o as a,a2 as o}from"./chunks/framework.84TDCN6B.js";const u=JSON.parse('{"title":"Content","description":"","frontmatter":{},"headers":[],"relativePath":"content/index.md","filePath":"content/index.md"}'),r={name:"content/index.md"},i=o('<h1 id="content" tabindex="-1">Content <a class="header-anchor" href="#content" aria-label="Permalink to &quot;Content&quot;">​</a></h1><p><a href="https://github.com/sixwaaaay/sharing/actions/workflows/content.yaml" target="_blank" rel="noreferrer"><img src="https://github.com/sixwaaaay/sharing/actions/workflows/content.yaml/badge.svg" alt="CI"></a></p><p><a href="https://hub.docker.com/r/sixwaaaay/content" target="_blank" rel="noreferrer"><img src="https://img.shields.io/docker/image-size/sixwaaaay/content/latest" alt="Container Image Size"></a></p><p><a href="https://hub.docker.com/r/sixwaaaay/content" target="_blank" rel="noreferrer"><img src="https://img.shields.io/docker/pulls/sixwaaaay/content" alt="Docker Pulls"></a></p><p><a href="https://hub.docker.com/r/sixwaaaay/content" target="_blank" rel="noreferrer"><img src="https://img.shields.io/docker/v/sixwaaaay/content?sort=semver" alt="Docker Image Version (latest semver)"></a></p><p><a href="https://codecov.io/gh/sixwaaaay/sharing" target="_blank" rel="noreferrer"><img src="https://codecov.io/gh/sixwaaaay/sharing/branch/main/graph/badge.svg" alt="Codcov"></a></p><p>The content module backend.</p><h2 id="technologies" tabindex="-1">Technologies <a class="header-anchor" href="#technologies" aria-label="Permalink to &quot;Technologies&quot;">​</a></h2><table><thead><tr><th>Name</th><th>Usage</th></tr></thead><tbody><tr><td>Minimal API</td><td>Application Backbone Framework</td></tr><tr><td>Dapper.AOT</td><td>Database Access</td></tr><tr><td>MySQL</td><td>Database</td></tr><tr><td>NativeAOT</td><td>AOT Compilation</td></tr><tr><td>Grpc Client</td><td>Grpc Call</td></tr><tr><td>Bearer Token</td><td>Security</td></tr><tr><td>Prometheus</td><td>Metrics</td></tr><tr><td>OpenTelemetry</td><td>Tracing</td></tr><tr><td>XUnit</td><td>Testing</td></tr><tr><td>Coverlet</td><td>Coverage</td></tr><tr><td>Docker</td><td>Containerization</td></tr><tr><td>Compose</td><td>Automation</td></tr><tr><td>GitHub Actions</td><td>CI/CD</td></tr></tbody></table><h2 id="details" tabindex="-1">Details <a class="header-anchor" href="#details" aria-label="Permalink to &quot;Details&quot;">​</a></h2><p>The content module backend is a Minimal API application that provides HTTP APIs for content. With the help of <strong>Dapper.AOT</strong>, the application can access the MySQL database with simplified object mapping without reflection. The application is compiled to a native image by <strong>NativeAOT</strong>, so that the application can start faster, consume less memory and have a smaller disk footprint. <strong>Grpc Client</strong> is used to call the user module backend to get the user information. <strong>Prometheus</strong> is used to collect the metrics, and <strong>OpenTelemetry</strong> is used to collect the traces. <strong>Docker</strong> is used to containerize the application, and <strong>Compose</strong> is used to automate the development environment. <strong>GitHub Actions</strong> is used to automate the CI/CD process, and <strong>XUnit</strong> is used to test the application with <strong>Coverlet</strong> for coverage.</p><h2 id="user-features" tabindex="-1">User Features <a class="header-anchor" href="#user-features" aria-label="Permalink to &quot;User Features&quot;">​</a></h2><ul><li>Submit a video contents</li><li>Read video contents by page</li><li>Read video contents of a user by page</li><li>Like a video content</li><li>Dislike a video content</li><li>Chat with a user</li><li>Query Chat history with a user</li><li>Video Information probing</li></ul><h2 id="service-features" tabindex="-1">Service Features <a class="header-anchor" href="#service-features" aria-label="Permalink to &quot;Service Features&quot;">​</a></h2><ul><li>MySQL Index Optimization for video contents and chat history query performance</li><li>Keyset Pagination for video contents and chat history query performance</li><li>AOT Compilation for less memory and faster startup</li><li>Docker Containerization for packaging</li><li>Compose Automation for development environment</li><li>GitHub Actions for CI/CD</li><li>XUnit for testing</li><li>Coverlet for coverage</li></ul>',15),n=[i];function s(l,d,c,h,p,m){return a(),e("div",null,n)}const f=t(r,[["render",s]]);export{u as __pageData,f as default};
